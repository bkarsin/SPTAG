
#include <stdio.h>
#include <cuda_runtime.h>
#include <cuda_fp16.h>

#include "../Distance.hxx"

template<typename T, typename SUMTYPE>
__global__ void calc_dist(Point<T, SUMTYPE, 100>** v, int num) {

  printf("cosine\n");
  for(int i=0; i<num; i++) {
    for(int j=0; j<num; j++) {
      printf("%0.3f, ", (float)v[i]->cosine(v[j]));
    }
    printf("\n");
  }
/*
  printf("%.03f, %0.3f, %0.3f\n", 0.0, (float)v1->cosine(v2), (float)v1->cosine(v3));
  printf("%0.3f, %0.3f, %0.3f\n", (float)v2->cosine(v1), 0.0, (float)v2->cosine(v3));
  printf("%0.3f, %0.3f, %0.3f\n", (float)v3->cosine(v1), (float)v3->cosine(v2), 0.0);
*/
}

#define NUM 10

int main(int argc, char* argv[]) {
{
// Compute distances with int8_t
  int8_t d[NUM][100] = {
  {-6,0,0,8,-3,0,1,0,0,0,0,0,0,-60,0,-16,-1,0,11,0,0,-13,0,0,0,32,0,0,0,0,5,0,-5,0,0,0,-64,8,0,0,0,0,0,-3,0,0,0,0,0,0,-5,0,13,0,0,1,0,0,0,-18,0,1,0,0,0,0,0,0,-5,0,0,0,0,0,-13,0,37,0,0,0,0,0,0,0,0,-57,0,0,0,-5,-11,0,0,0,0,0,-11,0,16,18},
  {0,0,0,0,19,0,-8,3,6,0,0,0,0,-11,3,-9,46,0,0,2,0,0,-8,0,0,-2,0,0,0,0,11,0,0,0,39,0,20,30,0,0,0,35,0,0,0,0,0,-4,-18,0,0,0,-45,-33,0,0,2,0,0,0,-48,5,0,0,0,-33,2,0,2,0,0,0,0,0,0,-9,0,0,0,-5,0,0,0,0,0,37,0,0,0,0,0,0,0,0,0,0,12,0,0,0},
  {-4,0,0,0,0,4,0,4,12,0,0,1,0,0,-16,-29,0,-9,22,0,6,5,20,0,0,0,0,-18,0,4,1,0,0,0,0,18,0,0,0,8,-2,0,5,0,0,-27,0,0,0,0,-29,0,19,0,0,-6,-2,0,0,-37,0,0,0,0,-19,0,0,0,11,0,0,0,36,0,0,0,62,0,0,0,0,33,20,-22,0,0,0,-16,0,0,0,0,0,2,23,1,-29,8,1,0},
{38,-8,38,0,17,0,0,5,0,24,-5,0,0,0,0,4,0,0,9,0,31,-8,0,0,0,0,0,26,0,0,-4,0,0,0,-1,0,0,0,0,-13,0,9,0,-37,-17,9,0,0,0,0,23,0,-2,0,-20,0,0,0,0,0,0,-48,0,0,-1,-9,16,-19,-5,0,0,0,8,-17,0,0,-10,0,0,0,-4,0,15,0,-5,-15,0,0,-15,-4,1,0,0,-45,24,-12,0,0,-4,0},
{0,0,0,0,0,11,0,0,5,0,0,0,0,0,0,0,0,4,0,2,0,1,0,0,5,0,-2,0,-10,0,0,0,0,20,0,0,-3,-7,0,-20,13,0,0,0,-6,-1,0,7,0,0,0,-13,0,0,0,0,-33,9,0,-21,0,0,-35,0,-3,0,0,0,0,52,12,0,0,0,14,45,10,0,13,0,-21,0,0,-22,0,0,3,0,0,-40,-34,0,0,0,0,0,-6,9,42,0},
{0,27,-23,67,0,0,0,0,0,1,12,18,0,0,-10,-1,0,0,0,0,0,0,0,0,-32,10,0,-25,0,-27,-24,0,0,-11,0,0,0,0,4,0,-5,0,-2,0,0,46,0,0,0,0,0,11,4,0,0,0,-13,0,-30,10,0,0,1,0,0,0,0,0,0,1,0,0,0,8,-36,0,-13,1,-2,-10,0,5,0,0,-19,0,0,5,0,-4,0,-11,0,0,18,0,0,0,1,-8},
{-3,0,-45,-20,0,0,-20,0,0,0,-75,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,-24,0,43,0,-1,0,0,0,-24,0,0,0,10,0,0,-31,0,0,0,0,0,0,1,0,0,0,3,0,0,-17,0,0,0,0,-13,0,0,0,0,0,-40,0,0,0,0,8,0,0,-5,-8,0,0,0,0,0,0,0,0,0,0,0,27,3,-5,10,0,0},
{0,17,-24,-9,0,-11,0,-45,0,-2,0,0,0,0,0,9,0,0,-19,0,-10,0,0,0,2,0,0,0,-9,56,0,0,10,0,23,23,-28,0,12,0,0,0,0,-4,0,0,-2,0,0,-17,0,0,0,-4,0,6,0,0,0,0,11,0,23,0,0,0,37,0,0,15,0,-1,19,47,-12,0,0,0,15,0,0,0,0,10,0,-4,0,0,0,0,6,-9,0,0,0,0,0,0,0,30},
{0,0,0,0,0,0,22,0,0,9,0,9,0,0,0,0,0,0,0,47,0,0,0,0,0,-26,26,-1,0,0,0,0,0,0,-9,0,0,17,0,-44,0,0,0,0,0,-26,0,0,8,0,0,0,0,0,-1,-28,0,13,1,-13,0,9,17,0,0,0,0,0,0,-61,0,0,0,0,0,0,16,20,0,0,0,0,-13,-22,0,0,9,-2,0,0,0,-1,0,-6,-41,0,0,0,0,0},
{0,0,30,27,0,0,-25,0,0,0,0,-42,0,23,-37,0,0,0,0,0,13,0,-3,0,0,1,0,0,0,0,0,10,0,0,8,-16,0,0,33,0,0,0,0,0,-16,-5,0,0,3,0,0,0,-8,18,0,0,-8,0,0,0,3,0,-8,-38,0,0,0,11,0,0,0,-8,-28,0,10,10,0,0,0,23,0,0,-47,32,0,0,25,-8,0,0,0,0,0,0,0,0,-6,0,1,0}
  };

  std::vector<int8_t> v[NUM];

  for(int j=0; j<NUM; j++) {
    for(int i=0; i<100; i++) {
      v[j].push_back(d[j][i]);
    }
  }
  
  Point<int8_t, int, 100>** int8_points;
  cudaMallocManaged(&int8_points, NUM*sizeof(Point<int8_t, int, 100>*));


  for(int i=0; i<NUM; i++) {
    cudaMallocManaged(&int8_points[i], sizeof(Point<int8_t, int, 100>));
    int8_points[i]->load(v[i]);
    int8_points[i]->id = i;
  }

  calc_dist<int8_t,int><<<1,1>>>(int8_points, NUM);
  cudaDeviceSynchronize();
}
{
// Test distances with floats
  float d[NUM][100] = {
  {-0.053239,0.000000,0.000000,0.066548,-0.026619,0.000000,0.013310,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.479149,0.000000,-0.133097,-0.013310,0.000000,0.093168,0.000000,0.000000,-0.106478,0.000000,0.000000,0.000000,0.252884,0.000000,0.000000,0.000000,0.000000,0.039929,0.000000,-0.039929,0.000000,0.000000,0.000000,-0.505768,0.066548,0.000000,0.000000,0.000000,0.000000,0.000000,-0.026619,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.039929,0.000000,0.106478,0.000000,0.000000,0.013310,0.000000,0.000000,0.000000,-0.146407,0.000000,0.013310,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.039929,0.000000,0.000000,0.000000,0.000000,0.000000,-0.106478,0.000000,0.292813,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.452530,0.000000,0.000000,0.000000,-0.039929,-0.093168,0.000000,0.000000,0.000000,0.000000,0.000000,-0.093168,0.000000,0.133097,0.146407},
  {0.000000,0.000000,0.000000,0.000000,0.150760,0.000000,-0.067842,0.030152,0.052766,0.000000,0.000000,0.000000,0.000000,-0.090456,0.030152,-0.075380,0.369362,0.000000,0.000000,0.022614,0.000000,0.000000,-0.067842,0.000000,0.000000,-0.022614,0.000000,0.000000,0.000000,0.000000,0.090456,0.000000,0.000000,0.000000,0.309058,0.000000,0.158298,0.241216,0.000000,0.000000,0.000000,0.278906,0.000000,0.000000,0.000000,0.000000,0.000000,-0.037690,-0.143222,0.000000,0.000000,0.000000,-0.361824,-0.263830,0.000000,0.000000,0.022614,0.000000,0.000000,0.000000,-0.384438,0.045228,0.000000,0.000000,0.000000,-0.263830,0.022614,-0.007538,0.022614,0.000000,0.000000,0.000000,0.000000,0.000000,0.007538,-0.075380,0.000000,0.000000,0.000000,-0.045228,0.000000,0.000000,0.000000,0.000000,0.000000,0.293982,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.097994,0.000000,0.007538,0.007538},
  {-0.032737,0.000000,0.000000,0.000000,0.000000,0.032737,0.000000,0.032737,0.098210,0.000000,0.000000,0.010912,0.000000,0.000000,-0.130946,-0.229156,0.000000,-0.076385,0.174595,0.000000,0.054561,0.043649,0.163683,0.000000,0.000000,0.000000,0.000000,-0.141859,0.000000,0.032737,0.010912,0.000000,0.000000,0.000000,0.000000,0.141859,0.000000,0.000000,0.000000,0.065473,-0.021824,0.000000,0.043649,0.000000,0.000000,-0.218244,0.000000,0.000000,0.000000,0.000000,-0.229156,0.000000,0.152771,0.000000,0.000000,-0.054561,-0.021824,0.000000,0.000000,-0.294629,0.000000,0.000000,0.000000,0.000000,-0.152771,0.000000,0.000000,0.000000,0.087298,0.000000,0.000000,0.000000,0.283717,0.000000,0.000000,0.000000,0.491049,0.000000,0.000000,0.000000,0.000000,0.261893,0.163683,-0.174595,0.000000,0.000000,0.000000,-0.130946,0.000000,0.000000,0.000000,0.000000,0.000000,0.021824,0.185507,0.010912,-0.229156,0.065473,0.010912,0.000000},
{0.303026,-0.064934,0.303026,0,0.140691,0,0,0.043289,0,0.194802,-0.043289,0,0,0,0,0.032467,0,0,0.075757,0,0.248914,-0.064934,0,0,0,0,0,0.205625,0,0,-0.032467,0,0,0,-0.010822,0,0,0,0,-0.108224,0,0.075757,0,-0.292204,-0.140691,0.075757,0,0,0,0,0.18398,0,-0.021645,0,-0.162335,0,0,0,0,0,0,-0.378783,0,0,-0.010822,-0.075757,0.129868,-0.151513,-0.043289,0,0,0,0.064934,-0.140691,0,0,-0.086579,0,0,0,-0.032467,0,0.119046,0,-0.043289,-0.119046,0,0,-0.119046,-0.032467,0.010822,0,0,-0.357138,0.194802,-0.097401,0,0,-0.032467,0},
{0,0,0,0,0,0.093482,0,0,0.046741,0,0,0,0,0,0,0,0,0.038951,0,0.023371,0,0.01558,0,0,0.046741,0,-0.023371,0,-0.085692,0,0,0,0,0.163594,0,0,-0.031161,-0.062321,0,-0.163594,0.109063,0,0,0,-0.054531,-0.01558,0,0.062321,0.00779,0,0,-0.109063,0,0,0,0,-0.264866,0.077902,-0.00779,-0.171384,0,0,-0.280447,0,-0.031161,0,0,0,0,0.41288,0.101272,0,0,0,0.116853,0.358348,0.085692,0,0.109063,0,-0.171384,0,0,-0.179174,0,0,0.031161,0,0,-0.319398,-0.272656,0,0,0,0,0,-0.054531,0.077902,0.334978,0},
{0,0.219722,-0.183101,0.530994,0,0,0,0,0,0.009155,0.100706,0.146481,0,0,-0.082396,-0.009155,0,0,0,0,0,0,0,0,-0.256342,0.082396,0,-0.201412,0,-0.219722,-0.192256,0,0,-0.091551,0,0,0,0,0.03662,0,-0.045775,0,-0.01831,0,0,0.366203,0,0,0,0,0,0.091551,0.03662,0,0,0,-0.109861,0,-0.238032,0.082396,0,0,0.009155,0,0,0,0,0,0,0.009155,0,0,0,0.064085,-0.283807,0,-0.109861,0.009155,-0.01831,-0.082396,0,0.045775,0,0,-0.155636,0,0,0.045775,0,-0.03662,0,-0.091551,0,0,0.146481,0,0,0,0.009155,-0.064085},
{-0.02755,0,-0.358153,-0.165301,0,0,-0.165301,0,0,0,-0.592329,0,0,0,0,0,0.02755,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.041325,0,-0.192851,0,0.344377,0,-0.013775,0,0,0,-0.192851,0,0,0,0.082651,0,0,-0.247952,0,0,0,0,0,0,0.013775,0,0,0,0.02755,0,0,-0.137751,0,0,0,0,-0.110201,0,0,0,0,0,-0.316827,0,0,0,0,0.068875,0,0,-0.041325,-0.068875,0,0,0,0,0,0,0,0,0,0,0,0.220402,0.02755,-0.041325,0.082651,0,0},
{0,0.141559,-0.19152,-0.074943,0,-0.091597,0,-0.35806,0,-0.016654,0,0,0,0,0,0.074943,0,0,-0.149886,0,-0.08327,0,0,0,0.016654,0,0,0,-0.074943,0.44133,0,0,0.08327,0,0.183193,0.183193,-0.224828,0,0.099924,0,0,0,0,-0.033308,0,0,-0.016654,0,0,-0.141559,0,0,0,-0.033308,0,0.049962,0,0,0,0,0.091597,0,0.183193,0,0,0,0.291444,0,0,0.124905,0,-0.008327,0.149886,0.374714,-0.099924,0,0,0,0.124905,0,0,0,0,0.08327,0,-0.033308,0,0,0,0,0.049962,-0.074943,0,0,0,0,0,0,0,0.241482},
{0,0,0,0,0,0,0.179887,0,0,0.074071,0,0.074071,0,0,0,0,0,0,0,0.370355,0,0,0,0,0,-0.211631,0.211631,-0.010582,0,0,0,0,0,0,-0.074071,0,0,0.13756,0,-0.349192,0,0,0,0,0,-0.211631,0,0,0.063489,0,0,0,0,0,-0.010582,-0.222213,0,0.105816,0.010582,-0.105816,0,0.074071,0.13756,0,0,0,0,0,0,-0.486752,0,0,0,0,0,0,0.126979,0.158723,0,0,0,0,-0.105816,-0.179887,0,0,0.074071,-0.021163,0,0,0,-0.010582,0,-0.052908,-0.328029,0,0,0,0,0},
{0,0,0.24,0.213333,0,0,-0.2,0,0,0,0,-0.333333,0,0.186667,-0.293333,0,0,0,0,0,0.106667,0,-0.026667,0,0,0.013333,0,0,0,0,0,0.08,0,0,0.066667,-0.133333,0,0,0.266667,0,0,0,0,0,-0.133333,-0.04,0,0,0.026667,0,0,0,-0.066667,0.146667,0,0,-0.066667,0,0,0,0.026667,0,-0.066667,-0.306667,0,0,0,0.093333,0,0,0,-0.066667,-0.226667,0,0.08,0.08,0,0,0,0.186667,0,0,-0.373333,0.253333,0,0,0.2,-0.066667,0,0,0,0,0,0,0,0,-0.053333,0,0.013333,0}
  };

  std::vector<float> v[NUM];

  for(int j=0; j<NUM; j++) {
    for(int i=0; i<100; i++) {
      v[j].push_back(d[j][i]);
    }
  }
  
  Point<float, float, 100>** int8_points;
  cudaMallocManaged(&int8_points, NUM*sizeof(Point<float, float, 100>*));


  for(int i=0; i<NUM; i++) {
    cudaMallocManaged(&int8_points[i], sizeof(Point<float, float, 100>));
    int8_points[i]->load(v[i]);
    int8_points[i]->id = i;
  }

  calc_dist<float,float><<<1,1>>>(int8_points, NUM);
  cudaDeviceSynchronize();
}
/*

  float df1[100] = {-0.053239,0.000000,0.000000,0.066548,-0.026619,0.000000,0.013310,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.479149,0.000000,-0.133097,-0.013310,0.000000,0.093168,0.000000,0.000000,-0.106478,0.000000,0.000000,0.000000,0.252884,0.000000,0.000000,0.000000,0.000000,0.039929,0.000000,-0.039929,0.000000,0.000000,0.000000,-0.505768,0.066548,0.000000,0.000000,0.000000,0.000000,0.000000,-0.026619,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.039929,0.000000,0.106478,0.000000,0.000000,0.013310,0.000000,0.000000,0.000000,-0.146407,0.000000,0.013310,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.039929,0.000000,0.000000,0.000000,0.000000,0.000000,-0.106478,0.000000,0.292813,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,-0.452530,0.000000,0.000000,0.000000,-0.039929,-0.093168,0.000000,0.000000,0.000000,0.000000,0.000000,-0.093168,0.000000,0.133097,0.146407};
  float df2[100] = {0.000000,0.000000,0.000000,0.000000,0.150760,0.000000,-0.067842,0.030152,0.052766,0.000000,0.000000,0.000000,0.000000,-0.090456,0.030152,-0.075380,0.369362,0.000000,0.000000,0.022614,0.000000,0.000000,-0.067842,0.000000,0.000000,-0.022614,0.000000,0.000000,0.000000,0.000000,0.090456,0.000000,0.000000,0.000000,0.309058,0.000000,0.158298,0.241216,0.000000,0.000000,0.000000,0.278906,0.000000,0.000000,0.000000,0.000000,0.000000,-0.037690,-0.143222,0.000000,0.000000,0.000000,-0.361824,-0.263830,0.000000,0.000000,0.022614,0.000000,0.000000,0.000000,-0.384438,0.045228,0.000000,0.000000,0.000000,-0.263830,0.022614,-0.007538,0.022614,0.000000,0.000000,0.000000,0.000000,0.000000,0.007538,-0.075380,0.000000,0.000000,0.000000,-0.045228,0.000000,0.000000,0.000000,0.000000,0.000000,0.293982,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.097994,0.000000,0.007538,0.007538};
  float df3[100] = {-0.032737,0.000000,0.000000,0.000000,0.000000,0.032737,0.000000,0.032737,0.098210,0.000000,0.000000,0.010912,0.000000,0.000000,-0.130946,-0.229156,0.000000,-0.076385,0.174595,0.000000,0.054561,0.043649,0.163683,0.000000,0.000000,0.000000,0.000000,-0.141859,0.000000,0.032737,0.010912,0.000000,0.000000,0.000000,0.000000,0.141859,0.000000,0.000000,0.000000,0.065473,-0.021824,0.000000,0.043649,0.000000,0.000000,-0.218244,0.000000,0.000000,0.000000,0.000000,-0.229156,0.000000,0.152771,0.000000,0.000000,-0.054561,-0.021824,0.000000,0.000000,-0.294629,0.000000,0.000000,0.000000,0.000000,-0.152771,0.000000,0.000000,0.000000,0.087298,0.000000,0.000000,0.000000,0.283717,0.000000,0.000000,0.000000,0.491049,0.000000,0.000000,0.000000,0.000000,0.261893,0.163683,-0.174595,0.000000,0.000000,0.000000,-0.130946,0.000000,0.000000,0.000000,0.000000,0.000000,0.021824,0.185507,0.010912,-0.229156,0.065473,0.010912,0.000000};

  std::vector<float> f1;
  std::vector<float> f2;
  std::vector<float> f3;

  for(int i=0; i<100; i++) {
    f1.push_back(df1[i]);
    f2.push_back(df2[i]);
    f3.push_back(df3[i]);
  }

  Point<float, float, 100>* a2;
  Point<float, float, 100>* b2;
  Point<float, float, 100>* c2;

  cudaMallocManaged(&a2, sizeof(Point<float, float, 100>));
  cudaMallocManaged(&b2, sizeof(Point<float, float, 100>));
  cudaMallocManaged(&c2, sizeof(Point<float, float, 100>));

  a2->load(f1);
  b2->load(f2);
  c2->load(f3);

  calc_dist<float,float><<<1,1>>>(a2, b2, c2);
  cudaDeviceSynchronize();  
*/
}
